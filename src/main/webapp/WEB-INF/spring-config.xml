<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
          http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
          http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
          http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <context:property-placeholder location="classpath:*.properties"/>
    <context:component-scan base-package="com.geetion"/>

    <!--创建jdbc数据源 -->
    <!-- <quartz id="dataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
         <property name="driverClass" value="${jdbc.oracle.driver}"/>
         <property name="url" value="${jdbc.oracle.url}"/>
         <property name="username" value="${jdbc.oracle.username}"/>
         <property name="password" value="${jdbc.oracle.password}"/>
     </quartz>-->

    <!--创建c3p0数据源 -->
    <!--<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"-->
    <!--destroy-method="close">-->
    <!--<property name="driverClass">-->
    <!--<value>${jdbc.mysql.driver}</value>-->
    <!--</property>-->
    <!--<property name="jdbcUrl">-->
    <!--<value>${jdbc.mysql.url}</value>-->
    <!--</property>-->
    <!--<property name="user">-->
    <!--<value>${jdbc.mysql.username}</value>-->
    <!--</property>-->
    <!--<property name="password">-->
    <!--<value>${jdbc.mysql.password}</value>-->
    <!--</property>-->
    <!--&lt;!&ndash;连接池中保留的最小连接数。 &ndash;&gt;-->
    <!--<property name="minPoolSize">-->
    <!--<value>10</value>-->
    <!--</property>-->
    <!--&lt;!&ndash;连接池中保留的最大连接数。Default: 15 &ndash;&gt;-->
    <!--<property name="maxPoolSize">-->
    <!--<value>30</value>-->
    <!--</property>-->
    <!--&lt;!&ndash;初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 &ndash;&gt;-->
    <!--<property name="initialPoolSize">-->
    <!--<value>10</value>-->
    <!--</property>-->
    <!--&lt;!&ndash;最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 &ndash;&gt;-->
    <!--<property name="maxIdleTime">-->
    <!--<value>120</value>-->
    <!--</property>-->
    <!--&lt;!&ndash;当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 &ndash;&gt;-->
    <!--<property name="acquireIncrement">-->
    <!--<value>10</value>-->
    <!--</property>-->
    <!--&lt;!&ndash;JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。-->
    <!--如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 &ndash;&gt;-->
    <!--<property name="maxStatements">-->
    <!--<value>0</value>-->
    <!--</property>-->
    <!--&lt;!&ndash;每60秒检查所有连接池中的空闲连接。Default: 0 &ndash;&gt;-->
    <!--<property name="idleConnectionTestPeriod">-->
    <!--<value>60</value>-->
    <!--</property>-->
    <!--&lt;!&ndash;定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 &ndash;&gt;-->
    <!--<property name="acquireRetryAttempts">-->
    <!--<value>30</value>-->
    <!--</property>-->
    <!--&lt;!&ndash;获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试-->
    <!--获取连接失败后该数据源将申明已断开并永久关闭。Default: false &ndash;&gt;-->
    <!--<property name="breakAfterAcquireFailure">-->
    <!--<value>true</value>-->
    <!--</property>-->
    <!--&lt;!&ndash;因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable-->
    <!--等方法来提升连接测试的性能。Default: false &ndash;&gt;-->
    <!--<property name="testConnectionOnCheckout">-->
    <!--<value>false</value>-->
    <!--</property>-->
    <!--</bean>-->

    <!-- 数据源配置, 使用 BoneCP 数据库连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
        <property name="driverClassName">
            <value>${jdbc.mysql.driver}</value>
        </property>
        <!-- 基本属性 url、user、password -->
        <property name="url">
            <value>${jdbc.mysql.url}</value>
        </property>
        <property name="username">
            <value>${jdbc.mysql.username}</value>
        </property>
        <property name="password">
            <value>${jdbc.mysql.password}</value>
        </property>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="3"/>
        <property name="minIdle" value="3"/>
        <property name="maxActive" value="20"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>

        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用）
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat"/>
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" primary="true">
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath:mysql-mappers/*DAO.xml"/>
        <property name="typeAliasesPackage" value="com.geetion.tieba.dao"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageHelper">
                    <property name="properties">
                        <value>
                            dialect=${database.type}
                            reasonable=true
                            offsetAsPageNum=true
                            rowBoundsWithCount=true
                            pageSizeZero=true
                            params=pageNum=start;pageSize=limit;pageSizeZero=zero;reasonable=heli;count=contsql
                        </value>
                    </property>
                </bean>
            </array>
        </property>
    </bean>

    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>

    <!--事务管理器配置-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>
    <aop:aspectj-autoproxy proxy-target-class="true"/>
    <!-- 通过AOP配置提供事务增强，让service包下所有Bean的所有方法拥有事务 -->
    <aop:config proxy-target-class="true">
        <!-- 只对业务逻辑层实施事务 -->
        <aop:pointcut id="serviceMethod" expression="execution(* com.geetion.tieba.service..*(..))"/>
        <aop:advisor id="txAdvisor" pointcut-ref="serviceMethod" advice-ref="txAdvice"/>
        <aop:aspect id="aspect" ref="loggerAOP">
            <aop:pointcut id="pointLogger"
                          expression="execution(* com.geetion.tieba.controller.*.impl..*(..))"/>
            <aop:after method="doAfter" pointcut-ref="pointLogger"/>
        </aop:aspect>
    </aop:config>

    <bean id="loggerAOP" class="com.geetion.tieba.aop.LoggerAOP"/>
    <!-- Mapper接口所在包名，Spring会自动查找其下的Mapper -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.geetion.tieba.dao"/>
    </bean>
    <bean class="com.geetion.tieba.utils.SpringUtils"/>

    <import resource="spring-config-shiro.xml"/>

</beans>
    